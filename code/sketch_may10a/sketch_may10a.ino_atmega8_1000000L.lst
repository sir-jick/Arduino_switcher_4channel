
C:\Users\Sir_Jick\AppData\Local\Temp\arduino_build_332496/sketch_may10a.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
   0:	44 c0       	rjmp	.+136    	; 0x8a <__ctors_end>
   2:	5e c0       	rjmp	.+188    	; 0xc0 <__bad_interrupt>
   4:	5d c0       	rjmp	.+186    	; 0xc0 <__bad_interrupt>
   6:	5c c0       	rjmp	.+184    	; 0xc0 <__bad_interrupt>
   8:	5b c0       	rjmp	.+182    	; 0xc0 <__bad_interrupt>
   a:	5a c0       	rjmp	.+180    	; 0xc0 <__bad_interrupt>
   c:	59 c0       	rjmp	.+178    	; 0xc0 <__bad_interrupt>
   e:	58 c0       	rjmp	.+176    	; 0xc0 <__bad_interrupt>
  10:	57 c0       	rjmp	.+174    	; 0xc0 <__bad_interrupt>
  12:	bb c0       	rjmp	.+374    	; 0x18a <__vector_9>
  14:	55 c0       	rjmp	.+170    	; 0xc0 <__bad_interrupt>
  16:	54 c0       	rjmp	.+168    	; 0xc0 <__bad_interrupt>
  18:	53 c0       	rjmp	.+166    	; 0xc0 <__bad_interrupt>
  1a:	52 c0       	rjmp	.+164    	; 0xc0 <__bad_interrupt>
  1c:	51 c0       	rjmp	.+162    	; 0xc0 <__bad_interrupt>
  1e:	50 c0       	rjmp	.+160    	; 0xc0 <__bad_interrupt>
  20:	4f c0       	rjmp	.+158    	; 0xc0 <__bad_interrupt>
  22:	4e c0       	rjmp	.+156    	; 0xc0 <__bad_interrupt>
  24:	4d c0       	rjmp	.+154    	; 0xc0 <__bad_interrupt>

00000026 <__trampolines_end>:
__trampolines_start():
  26:	00 00       	nop
  28:	00 00       	nop
  2a:	38 00       	.word	0x0038	; ????
  2c:	35 00       	.word	0x0035	; ????
  2e:	32 00       	.word	0x0032	; ????

00000030 <port_to_mode_PGM>:
  30:	00 00 00 00 37 00 34 00 31 00                       ....7.4.1.

0000003a <port_to_input_PGM>:
  3a:	00 00 00 00 36 00 33 00 30 00                       ....6.3.0.

00000044 <digital_pin_to_port_PGM>:
  44:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
  54:	03 03 03 03 02 02 03                                .......

0000005b <digital_pin_to_bit_mask_PGM>:
  5b:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
  6b:	04 08 10 20 40 80 40                                ... @.@

00000072 <digital_pin_to_timer_PGM>:
	...
  7a:	00 04 05 07 00 00 00 00 00 00 00 00 00 00 00 00     ................

0000008a <__ctors_end>:
__dtors_end():
  8a:	11 24       	eor	r1, r1
  8c:	1f be       	out	0x3f, r1	; 63
  8e:	cf e5       	ldi	r28, 0x5F	; 95
  90:	d4 e0       	ldi	r29, 0x04	; 4
  92:	de bf       	out	0x3e, r29	; 62
  94:	cd bf       	out	0x3d, r28	; 61

00000096 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2409
  96:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2410
  98:	a0 e6       	ldi	r26, 0x60	; 96
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2411
  9a:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2412
  9c:	e6 e0       	ldi	r30, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2413
  9e:	f4 e0       	ldi	r31, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2414
  a0:	02 c0       	rjmp	.+4      	; 0xa6 <__do_copy_data+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2417
  a2:	05 90       	lpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2422
  a4:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2424
  a6:	a8 36       	cpi	r26, 0x68	; 104
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2425
  a8:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2426
  aa:	d9 f7       	brne	.-10     	; 0xa2 <__do_copy_data+0xc>

000000ac <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
  ac:	20 e0       	ldi	r18, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
  ae:	a8 e6       	ldi	r26, 0x68	; 104
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
  b0:	b0 e0       	ldi	r27, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
  b2:	01 c0       	rjmp	.+2      	; 0xb6 <.do_clear_bss_start>

000000b4 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
  b4:	1d 92       	st	X+, r1

000000b6 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
  b6:	a3 37       	cpi	r26, 0x73	; 115
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
  b8:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
  ba:	e1 f7       	brne	.-8      	; 0xb4 <.do_clear_bss_loop>
.do_clear_bss_start():
  bc:	b0 d0       	rcall	.+352    	; 0x21e <main>
  be:	a1 c1       	rjmp	.+834    	; 0x402 <_exit>

000000c0 <__bad_interrupt>:
__vector_1():
  c0:	9f cf       	rjmp	.-194    	; 0x0 <__vectors>

000000c2 <turnOffPWM>:
turnOffPWM():
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
  c2:	85 30       	cpi	r24, 0x05	; 5
  c4:	41 f0       	breq	.+16     	; 0xd6 <turnOffPWM+0x14>
  c6:	87 30       	cpi	r24, 0x07	; 7
  c8:	49 f0       	breq	.+18     	; 0xdc <turnOffPWM+0x1a>
  ca:	84 30       	cpi	r24, 0x04	; 4
  cc:	51 f4       	brne	.+20     	; 0xe2 <turnOffPWM+0x20>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
  ce:	8f b5       	in	r24, 0x2f	; 47
  d0:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
  d2:	8f bd       	out	0x2f, r24	; 47
  d4:	08 95       	ret
  d6:	8f b5       	in	r24, 0x2f	; 47
  d8:	8f 7d       	andi	r24, 0xDF	; 223
  da:	fb cf       	rjmp	.-10     	; 0xd2 <turnOffPWM+0x10>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:99
    #endif
    
    // Timer2
    #if defined(TCCR2) && defined(COM21)
      case TIMER2:
        TCCR2 &= ~_BV(COM21);
  dc:	85 b5       	in	r24, 0x25	; 37
  de:	8f 7d       	andi	r24, 0xDF	; 223
  e0:	85 bd       	out	0x25, r24	; 37
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:185
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
        break;
    #endif
  }
}
  e2:	08 95       	ret

000000e4 <digitalWrite>:
digitalWrite():
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:188

void digitalWrite(uint8_t pin, uint8_t val)
{
  e4:	1f 93       	push	r17
  e6:	cf 93       	push	r28
  e8:	df 93       	push	r29
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
  ea:	28 2f       	mov	r18, r24
  ec:	30 e0       	ldi	r19, 0x00	; 0
  ee:	f9 01       	movw	r30, r18
  f0:	ee 58       	subi	r30, 0x8E	; 142
  f2:	ff 4f       	sbci	r31, 0xFF	; 255
  f4:	84 91       	lpm	r24, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
  f6:	f9 01       	movw	r30, r18
  f8:	e5 5a       	subi	r30, 0xA5	; 165
  fa:	ff 4f       	sbci	r31, 0xFF	; 255
  fc:	d4 91       	lpm	r29, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
  fe:	f9 01       	movw	r30, r18
 100:	ec 5b       	subi	r30, 0xBC	; 188
 102:	ff 4f       	sbci	r31, 0xFF	; 255
 104:	c4 91       	lpm	r28, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
 106:	cc 23       	and	r28, r28
 108:	a1 f0       	breq	.+40     	; 0x132 <digitalWrite+0x4e>
 10a:	16 2f       	mov	r17, r22
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 10c:	81 11       	cpse	r24, r1
 10e:	d9 df       	rcall	.-78     	; 0xc2 <turnOffPWM>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
 110:	ec 2f       	mov	r30, r28
 112:	f0 e0       	ldi	r31, 0x00	; 0
 114:	ee 0f       	add	r30, r30
 116:	ff 1f       	adc	r31, r31
 118:	ea 5d       	subi	r30, 0xDA	; 218
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	a5 91       	lpm	r26, Z+
 11e:	b4 91       	lpm	r27, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
 120:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
 122:	f8 94       	cli
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
 124:	ec 91       	ld	r30, X
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
 126:	11 11       	cpse	r17, r1
 128:	08 c0       	rjmp	.+16     	; 0x13a <digitalWrite+0x56>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
 12a:	d0 95       	com	r29
 12c:	de 23       	and	r29, r30
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
 12e:	dc 93       	st	X, r29
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
 130:	8f bf       	out	0x3f, r24	; 63
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:212
}
 132:	df 91       	pop	r29
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	08 95       	ret
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
 13a:	de 2b       	or	r29, r30
 13c:	f8 cf       	rjmp	.-16     	; 0x12e <digitalWrite+0x4a>

0000013e <micros>:
micros():
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
 13e:	3f b7       	in	r19, 0x3f	; 63
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
 140:	f8 94       	cli
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
 142:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <timer0_overflow_count>
 146:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <timer0_overflow_count+0x1>
 14a:	a0 91 6f 00 	lds	r26, 0x006F	; 0x80006f <timer0_overflow_count+0x2>
 14e:	b0 91 70 00 	lds	r27, 0x0070	; 0x800070 <timer0_overflow_count+0x3>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
 152:	22 b7       	in	r18, 0x32	; 50
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:268
    m++;
#else
    q = 1;
#endif
#else
  if ((TIFR & _BV(TOV0)) && (t < 255))
 154:	08 b6       	in	r0, 0x38	; 56
 156:	00 fe       	sbrs	r0, 0
 158:	05 c0       	rjmp	.+10     	; 0x164 <micros+0x26>
 15a:	2f 3f       	cpi	r18, 0xFF	; 255
 15c:	19 f0       	breq	.+6      	; 0x164 <micros+0x26>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:270
#ifndef CORRECT_EXACT_MICROS
    m++;
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	a1 1d       	adc	r26, r1
 162:	b1 1d       	adc	r27, r1
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
 164:	3f bf       	out	0x3f, r19	; 63
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
 166:	ba 2f       	mov	r27, r26
 168:	a9 2f       	mov	r26, r25
 16a:	98 2f       	mov	r25, r24
 16c:	88 27       	eor	r24, r24
 16e:	bc 01       	movw	r22, r24
 170:	cd 01       	movw	r24, r26
 172:	62 0f       	add	r22, r18
 174:	71 1d       	adc	r23, r1
 176:	81 1d       	adc	r24, r1
 178:	91 1d       	adc	r25, r1
 17a:	46 e0       	ldi	r20, 0x06	; 6
 17c:	66 0f       	add	r22, r22
 17e:	77 1f       	adc	r23, r23
 180:	88 1f       	adc	r24, r24
 182:	99 1f       	adc	r25, r25
 184:	4a 95       	dec	r20
 186:	d1 f7       	brne	.-12     	; 0x17c <micros+0x3e>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
 188:	08 95       	ret

0000018a <__vector_9>:
__vector_9():
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:159
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
ISR(TIM0_OVF_vect)
#else
ISR(TIMER0_OVF_vect)
#endif
{
 18a:	1f 92       	push	r1
 18c:	0f 92       	push	r0
 18e:	0f b6       	in	r0, 0x3f	; 63
 190:	0f 92       	push	r0
 192:	11 24       	eor	r1, r1
 194:	2f 93       	push	r18
 196:	3f 93       	push	r19
 198:	8f 93       	push	r24
 19a:	9f 93       	push	r25
 19c:	af 93       	push	r26
 19e:	bf 93       	push	r27
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:167
  static unsigned char timer0_exact = 0;
#endif

  // copy these to local variables so they can be stored in registers
  // (volatile variables must be read from memory on every access, so this saves time)
  unsigned long m = timer0_millis;
 1a0:	80 91 69 00 	lds	r24, 0x0069	; 0x800069 <timer0_millis>
 1a4:	90 91 6a 00 	lds	r25, 0x006A	; 0x80006a <timer0_millis+0x1>
 1a8:	a0 91 6b 00 	lds	r26, 0x006B	; 0x80006b <timer0_millis+0x2>
 1ac:	b0 91 6c 00 	lds	r27, 0x006C	; 0x80006c <timer0_millis+0x3>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:168
  unsigned char f = timer0_fract;
 1b0:	30 91 68 00 	lds	r19, 0x0068	; 0x800068 <__data_end>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:170

  f += FRACT_INC FRACT_INC_PLUS;
 1b4:	20 e3       	ldi	r18, 0x30	; 48
 1b6:	23 0f       	add	r18, r19
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:200
    ++f;
  }
#endif
#endif // CORRECT_EXACT_MILLIS

  if (f >= FRACT_MAX) {
 1b8:	2d 37       	cpi	r18, 0x7D	; 125
 1ba:	68 f1       	brcs	.+90     	; 0x216 <__vector_9+0x8c>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:201
    f -= FRACT_MAX;
 1bc:	23 eb       	ldi	r18, 0xB3	; 179
 1be:	23 0f       	add	r18, r19
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:202
    m += MILLIS_INC + 1;
 1c0:	41 96       	adiw	r24, 0x11	; 17
 1c2:	a1 1d       	adc	r26, r1
 1c4:	b1 1d       	adc	r27, r1
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:208
  }
  else {
    m += MILLIS_INC;
  }

  timer0_fract = f;
 1c6:	20 93 68 00 	sts	0x0068, r18	; 0x800068 <__data_end>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:209
  timer0_millis = m;
 1ca:	80 93 69 00 	sts	0x0069, r24	; 0x800069 <timer0_millis>
 1ce:	90 93 6a 00 	sts	0x006A, r25	; 0x80006a <timer0_millis+0x1>
 1d2:	a0 93 6b 00 	sts	0x006B, r26	; 0x80006b <timer0_millis+0x2>
 1d6:	b0 93 6c 00 	sts	0x006C, r27	; 0x80006c <timer0_millis+0x3>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:211
#ifndef CORRECT_EXACT_MICROS
  timer0_overflow_count++;
 1da:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <timer0_overflow_count>
 1de:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <timer0_overflow_count+0x1>
 1e2:	a0 91 6f 00 	lds	r26, 0x006F	; 0x80006f <timer0_overflow_count+0x2>
 1e6:	b0 91 70 00 	lds	r27, 0x0070	; 0x800070 <timer0_overflow_count+0x3>
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	a1 1d       	adc	r26, r1
 1ee:	b1 1d       	adc	r27, r1
 1f0:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <timer0_overflow_count>
 1f4:	90 93 6e 00 	sts	0x006E, r25	; 0x80006e <timer0_overflow_count+0x1>
 1f8:	a0 93 6f 00 	sts	0x006F, r26	; 0x80006f <timer0_overflow_count+0x2>
 1fc:	b0 93 70 00 	sts	0x0070, r27	; 0x800070 <timer0_overflow_count+0x3>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:213
#endif
}
 200:	bf 91       	pop	r27
 202:	af 91       	pop	r26
 204:	9f 91       	pop	r25
 206:	8f 91       	pop	r24
 208:	3f 91       	pop	r19
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:205
  if (f >= FRACT_MAX) {
    f -= FRACT_MAX;
    m += MILLIS_INC + 1;
  }
  else {
    m += MILLIS_INC;
 216:	40 96       	adiw	r24, 0x10	; 16
 218:	a1 1d       	adc	r26, r1
 21a:	b1 1d       	adc	r27, r1
 21c:	d4 cf       	rjmp	.-88     	; 0x1c6 <__vector_9+0x3c>

0000021e <main>:
main():
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
 21e:	78 94       	sei
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:966
#if defined(__AVR_ATmega64__) || defined(__AVR_ATmega128__)
  // CPU specific: different values for the ATmega64/128
  TCCR0 |= _BV(WGM01) | _BV(WGM00) | _BV(CS02);
#elif defined(TCCR0) && defined(CS01) && defined(CS00)
  // This combination is for the ATmega8535, ATmega8, ATmega16, ATmega32, ATmega8515, ATmega162
  TCCR0 |= _BV(CS01) | _BV(CS00);
 220:	83 b7       	in	r24, 0x33	; 51
 222:	83 60       	ori	r24, 0x03	; 3
 224:	83 bf       	out	0x33, r24	; 51
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:982
  #error Timer 0 prescale factor 64 not set correctly
#endif

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
 226:	89 b7       	in	r24, 0x39	; 57
 228:	81 60       	ori	r24, 0x01	; 1
 22a:	89 bf       	out	0x39, r24	; 57
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
 22c:	82 e0       	ldi	r24, 0x02	; 2
 22e:	8e bd       	out	0x2e, r24	; 46
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
 230:	8f b5       	in	r24, 0x2f	; 47
 232:	81 60       	ori	r24, 0x01	; 1
 234:	8f bd       	out	0x2f, r24	; 47
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1011
#endif

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
 236:	85 b5       	in	r24, 0x25	; 37
 238:	84 60       	ori	r24, 0x04	; 4
 23a:	85 bd       	out	0x25, r24	; 37
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1020
  TCCR2A |= _BV(CS22);
#endif

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
 23c:	85 b5       	in	r24, 0x25	; 37
 23e:	80 64       	ori	r24, 0x40	; 64
 240:	85 bd       	out	0x25, r24	; 37
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1058
  #elif F_CPU >= 4000000 // 4 MHz / 32 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS0) | _BV(ADEN);
  #elif F_CPU >= 2000000 // 2 MHz / 16 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADEN);
  #elif F_CPU >= 1000000 // 1 MHz / 8 = 125 KHz
    ADCSRA = _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
 242:	83 e8       	ldi	r24, 0x83	; 131
 244:	86 b9       	out	0x06, r24	; 6
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:1068

  // The bootloader connects pins 0 and 1 to the USART; disconnect them
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
 246:	1a b8       	out	0x0a, r1	; 10
pinMode():
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  uint8_t bit = digitalPinToBitMask(pin);
 248:	75 e6       	ldi	r23, 0x65	; 101
 24a:	87 2e       	mov	r8, r23
 24c:	70 e0       	ldi	r23, 0x00	; 0
 24e:	97 2e       	mov	r9, r23
 250:	f4 01       	movw	r30, r8
 252:	24 91       	lpm	r18, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
 254:	ce e4       	ldi	r28, 0x4E	; 78
 256:	d0 e0       	ldi	r29, 0x00	; 0
 258:	fe 01       	movw	r30, r28
 25a:	84 91       	lpm	r24, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 25c:	88 23       	and	r24, r24
 25e:	c9 f0       	breq	.+50     	; 0x292 <main+0x74>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	88 0f       	add	r24, r24
 264:	99 1f       	adc	r25, r25
 266:	fc 01       	movw	r30, r24
 268:	e0 5d       	subi	r30, 0xD0	; 208
 26a:	ff 4f       	sbci	r31, 0xFF	; 255
 26c:	a5 91       	lpm	r26, Z+
 26e:	b4 91       	lpm	r27, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
 270:	fc 01       	movw	r30, r24
 272:	ea 5d       	subi	r30, 0xDA	; 218
 274:	ff 4f       	sbci	r31, 0xFF	; 255
 276:	45 91       	lpm	r20, Z+
 278:	54 91       	lpm	r21, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:48
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
 27a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
 27c:	f8 94       	cli
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
 27e:	3c 91       	ld	r19, X
 280:	82 2f       	mov	r24, r18
 282:	80 95       	com	r24
 284:	83 23       	and	r24, r19
 286:	8c 93       	st	X, r24
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
 288:	fa 01       	movw	r30, r20
 28a:	80 81       	ld	r24, Z
 28c:	28 2b       	or	r18, r24
 28e:	20 83       	st	Z, r18
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
 290:	9f bf       	out	0x3f, r25	; 63
 292:	a0 e6       	ldi	r26, 0x60	; 96
 294:	b0 e0       	ldi	r27, 0x00	; 0
 296:	28 e6       	ldi	r18, 0x68	; 104
 298:	30 e0       	ldi	r19, 0x00	; 0
setup():
D:\PROJECTS\ARDUINO\Arduino-switcher-4channel\code\sketch_may10a/sketch_may10a.ino:9

void setup() {
  // پین سوئیچ را به عنوان ورودی و پین های رله را به عنوان خروجی تنظیم کنید
  pinMode(switchPin, INPUT_PULLUP);
  for (int i = 0; i < 4; ++i) {
    pinMode(relayPins[i], OUTPUT);
 29a:	8d 91       	ld	r24, X+
 29c:	9d 91       	ld	r25, X+
pinMode():
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:31
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
  uint8_t bit = digitalPinToBitMask(pin);
 29e:	99 27       	eor	r25, r25
 2a0:	fc 01       	movw	r30, r24
 2a2:	e5 5a       	subi	r30, 0xA5	; 165
 2a4:	ff 4f       	sbci	r31, 0xFF	; 255
 2a6:	44 91       	lpm	r20, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
 2a8:	8c 5b       	subi	r24, 0xBC	; 188
 2aa:	9f 4f       	sbci	r25, 0xFF	; 255
 2ac:	fc 01       	movw	r30, r24
 2ae:	84 91       	lpm	r24, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
 2b0:	88 23       	and	r24, r24
 2b2:	a1 f0       	breq	.+40     	; 0x2dc <main+0xbe>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
 2b4:	90 e0       	ldi	r25, 0x00	; 0
 2b6:	88 0f       	add	r24, r24
 2b8:	99 1f       	adc	r25, r25
 2ba:	fc 01       	movw	r30, r24
 2bc:	e0 5d       	subi	r30, 0xD0	; 208
 2be:	ff 4f       	sbci	r31, 0xFF	; 255
 2c0:	65 91       	lpm	r22, Z+
 2c2:	74 91       	lpm	r23, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
 2c4:	fc 01       	movw	r30, r24
 2c6:	ea 5d       	subi	r30, 0xDA	; 218
 2c8:	ff 4f       	sbci	r31, 0xFF	; 255
 2ca:	85 91       	lpm	r24, Z+
 2cc:	94 91       	lpm	r25, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:54
    cli();
    *reg &= ~bit;
    *out |= bit;
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
 2ce:	8f b7       	in	r24, 0x3f	; 63
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
 2d0:	f8 94       	cli
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
 2d2:	fb 01       	movw	r30, r22
 2d4:	90 81       	ld	r25, Z
 2d6:	49 2b       	or	r20, r25
 2d8:	40 83       	st	Z, r20
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
 2da:	8f bf       	out	0x3f, r24	; 63
setup():
D:\PROJECTS\ARDUINO\Arduino-switcher-4channel\code\sketch_may10a/sketch_may10a.ino:8
int relayState = 0; // متغیر وضعیت رله

void setup() {
  // پین سوئیچ را به عنوان ورودی و پین های رله را به عنوان خروجی تنظیم کنید
  pinMode(switchPin, INPUT_PULLUP);
  for (int i = 0; i < 4; ++i) {
 2dc:	2a 17       	cp	r18, r26
 2de:	3b 07       	cpc	r19, r27
 2e0:	e1 f6       	brne	.-72     	; 0x29a <main+0x7c>
loop():
D:\PROJECTS\ARDUINO\Arduino-switcher-4channel\code\sketch_may10a/sketch_may10a.ino:17

void loop() {
  // اگر سوئیچ فشار داده شد
  if (digitalRead(switchPin) == 0) {
    // وضعیت رله را به روز کنید
    relayState = (relayState + 1) % 4;
 2e2:	44 e0       	ldi	r20, 0x04	; 4
 2e4:	a4 2e       	mov	r10, r20
 2e6:	b1 2c       	mov	r11, r1
main():
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/main.cpp:47
  
  setup();
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
 2e8:	00 e0       	ldi	r16, 0x00	; 0
 2ea:	10 e0       	ldi	r17, 0x00	; 0
digitalRead():
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:216
  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
  uint8_t timer = digitalPinToTimer(pin);
 2ec:	ec e7       	ldi	r30, 0x7C	; 124
 2ee:	f0 e0       	ldi	r31, 0x00	; 0
 2f0:	84 91       	lpm	r24, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
 2f2:	f4 01       	movw	r30, r8
 2f4:	f4 90       	lpm	r15, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
 2f6:	fe 01       	movw	r30, r28
 2f8:	e4 90       	lpm	r14, Z
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
 2fa:	e1 10       	cpse	r14, r1
 2fc:	47 c0       	rjmp	.+142    	; 0x38c <main+0x16e>
loop():
D:\PROJECTS\ARDUINO\Arduino-switcher-4channel\code\sketch_may10a/sketch_may10a.ino:17
 2fe:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <relayState>
 302:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <relayState+0x1>
 306:	01 96       	adiw	r24, 0x01	; 1
 308:	b5 01       	movw	r22, r10
 30a:	54 d0       	rcall	.+168    	; 0x3b4 <__divmodhi4>
 30c:	7c 01       	movw	r14, r24
 30e:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <relayState+0x1>
 312:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <relayState>
D:\PROJECTS\ARDUINO\Arduino-switcher-4channel\code\sketch_may10a/sketch_may10a.ino:20

    // رله قبلی را خاموش کنید
    if (relayState > 0) {
 316:	18 16       	cp	r1, r24
 318:	19 06       	cpc	r1, r25
 31a:	44 f4       	brge	.+16     	; 0x32c <main+0x10e>
D:\PROJECTS\ARDUINO\Arduino-switcher-4channel\code\sketch_may10a/sketch_may10a.ino:21
      digitalWrite(relayPins[relayState - 1], LOW);
 31c:	fc 01       	movw	r30, r24
 31e:	ee 0f       	add	r30, r30
 320:	ff 1f       	adc	r31, r31
 322:	e2 5a       	subi	r30, 0xA2	; 162
 324:	ff 4f       	sbci	r31, 0xFF	; 255
 326:	60 e0       	ldi	r22, 0x00	; 0
 328:	80 81       	ld	r24, Z
 32a:	dc de       	rcall	.-584    	; 0xe4 <digitalWrite>
D:\PROJECTS\ARDUINO\Arduino-switcher-4channel\code\sketch_may10a/sketch_may10a.ino:25
    }

    // رله فعلی را روشن کنید
    digitalWrite(relayPins[relayState], HIGH);
 32c:	f7 01       	movw	r30, r14
 32e:	ee 0f       	add	r30, r30
 330:	ff 1f       	adc	r31, r31
 332:	e0 5a       	subi	r30, 0xA0	; 160
 334:	ff 4f       	sbci	r31, 0xFF	; 255
 336:	30 80       	ld	r3, Z
 338:	61 e0       	ldi	r22, 0x01	; 1
 33a:	83 2d       	mov	r24, r3
 33c:	d3 de       	rcall	.-602    	; 0xe4 <digitalWrite>
delay():
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:397
#endif // 0
}

void delay(unsigned long ms)
{
  unsigned long start = micros();
 33e:	ff de       	rcall	.-514    	; 0x13e <micros>
 340:	2b 01       	movw	r4, r22
 342:	3c 01       	movw	r6, r24
 344:	9c e2       	ldi	r25, 0x2C	; 44
 346:	c9 2e       	mov	r12, r25
 348:	dd 24       	eor	r13, r13
 34a:	d3 94       	inc	r13
 34c:	e1 2c       	mov	r14, r1
 34e:	f1 2c       	mov	r15, r1
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:401

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
 350:	f6 de       	rcall	.-532    	; 0x13e <micros>
 352:	64 19       	sub	r22, r4
 354:	75 09       	sbc	r23, r5
 356:	86 09       	sbc	r24, r6
 358:	97 09       	sbc	r25, r7
 35a:	68 3e       	cpi	r22, 0xE8	; 232
 35c:	73 40       	sbci	r23, 0x03	; 3
 35e:	81 05       	cpc	r24, r1
 360:	91 05       	cpc	r25, r1
 362:	b0 f3       	brcs	.-20     	; 0x350 <main+0x132>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:402
      ms--;
 364:	f1 e0       	ldi	r31, 0x01	; 1
 366:	cf 1a       	sub	r12, r31
 368:	d1 08       	sbc	r13, r1
 36a:	e1 08       	sbc	r14, r1
 36c:	f1 08       	sbc	r15, r1
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
 36e:	28 ee       	ldi	r18, 0xE8	; 232
 370:	42 0e       	add	r4, r18
 372:	23 e0       	ldi	r18, 0x03	; 3
 374:	52 1e       	adc	r5, r18
 376:	61 1c       	adc	r6, r1
 378:	71 1c       	adc	r7, r1
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
 37a:	c1 14       	cp	r12, r1
 37c:	d1 04       	cpc	r13, r1
 37e:	e1 04       	cpc	r14, r1
 380:	f1 04       	cpc	r15, r1
 382:	31 f7       	brne	.-52     	; 0x350 <main+0x132>
loop():
D:\PROJECTS\ARDUINO\Arduino-switcher-4channel\code\sketch_may10a/sketch_may10a.ino:30

    // منتظر 500 میلی ثانیه بمانید
    delay(300);
    // رله فعلی را خاموش کن
    digitalWrite(relayPins[relayState], LOW);
 384:	60 e0       	ldi	r22, 0x00	; 0
 386:	83 2d       	mov	r24, r3
 388:	ad de       	rcall	.-678    	; 0xe4 <digitalWrite>
 38a:	0e c0       	rjmp	.+28     	; 0x3a8 <main+0x18a>
digitalRead():
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
 38c:	81 11       	cpse	r24, r1
 38e:	99 de       	rcall	.-718    	; 0xc2 <turnOffPWM>
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
 390:	ee 2d       	mov	r30, r14
 392:	f0 e0       	ldi	r31, 0x00	; 0
 394:	ee 0f       	add	r30, r30
 396:	ff 1f       	adc	r31, r31
 398:	e6 5c       	subi	r30, 0xC6	; 198
 39a:	ff 4f       	sbci	r31, 0xFF	; 255
 39c:	a5 91       	lpm	r26, Z+
 39e:	b4 91       	lpm	r27, Z
 3a0:	8c 91       	ld	r24, X
 3a2:	f8 22       	and	r15, r24
 3a4:	09 f4       	brne	.+2      	; 0x3a8 <main+0x18a>
 3a6:	ab cf       	rjmp	.-170    	; 0x2fe <main+0xe0>
main():
C:\Users\Sir_Jick\AppData\Local\Arduino15\packages\MiniCore\hardware\avr\3.0.1\cores\MCUdude_corefiles/main.cpp:47
 3a8:	01 15       	cp	r16, r1
 3aa:	11 05       	cpc	r17, r1
 3ac:	09 f4       	brne	.+2      	; 0x3b0 <main+0x192>
 3ae:	9e cf       	rjmp	.-196    	; 0x2ec <main+0xce>
 3b0:	27 de       	rcall	.-946    	; 0x0 <__vectors>
 3b2:	9c cf       	rjmp	.-200    	; 0x2ec <main+0xce>

000003b4 <__divmodhi4>:
__divmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1440
 3b4:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1441
 3b6:	07 2e       	mov	r0, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1442
 3b8:	16 f4       	brtc	.+4      	; 0x3be <__divmodhi4+0xa>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1443
 3ba:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1444
 3bc:	06 d0       	rcall	.+12     	; 0x3ca <__divmodhi4_neg1>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1446
 3be:	77 fd       	sbrc	r23, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1447
 3c0:	08 d0       	rcall	.+16     	; 0x3d2 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1448
 3c2:	0b d0       	rcall	.+22     	; 0x3da <__udivmodhi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1449
 3c4:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1450
 3c6:	05 d0       	rcall	.+10     	; 0x3d2 <__divmodhi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1451
 3c8:	3e f4       	brtc	.+14     	; 0x3d8 <__divmodhi4_exit>

000003ca <__divmodhi4_neg1>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1454
 3ca:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1455
 3cc:	81 95       	neg	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1456
 3ce:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1457
 3d0:	08 95       	ret

000003d2 <__divmodhi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1460
 3d2:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1461
 3d4:	61 95       	neg	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1462
 3d6:	7f 4f       	sbci	r23, 0xFF	; 255

000003d8 <__divmodhi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1464
 3d8:	08 95       	ret

000003da <__udivmodhi4>:
__udivmodhi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
 3da:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
 3dc:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
 3de:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
 3e0:	07 c0       	rjmp	.+14     	; 0x3f0 <__udivmodhi4_ep>

000003e2 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
 3e2:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
 3e4:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
 3e6:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
 3e8:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
 3ea:	10 f0       	brcs	.+4      	; 0x3f0 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
 3ec:	a6 1b       	sub	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
 3ee:	b7 0b       	sbc	r27, r23

000003f0 <__udivmodhi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
 3f0:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
 3f2:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
 3f4:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
 3f6:	a9 f7       	brne	.-22     	; 0x3e2 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
 3f8:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
 3fa:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
 3fc:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
 3fe:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
 400:	08 95       	ret

00000402 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
 402:	f8 94       	cli

00000404 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr4/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
 404:	ff cf       	rjmp	.-2      	; 0x404 <__stop_program>
